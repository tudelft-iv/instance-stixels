#!/usr/bin/env python
# This file is part of Instance Stixels:
# https://github.com/tudelft-iv/instance-stixels
#
# Copyright (c) 2019 Thomas Hehn.
#
# Instance Stixels is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Instance Stixels is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Instance Stixels. If not, see <http://www.gnu.org/licenses/>.

PACKAGE = "instance_stixels"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("pairwise", bool_t, 0,
        "Use pairwise or unary regularizer.",
        False)

gen.add("disparity_weight", double_t, 0,
        "Disparity weight used to compute stixels.",
        0.0069935800364145494, 0.0, 100.0)
gen.add("segmentation_weight", double_t, 0,
        "Segmentation weight used to compute stixels.",
        11.241965032069425, 0.0, 100.0)
gen.add("instance_weight", double_t, 0,
        "Instance weight used to compute stixels.",
        0.0017313017435431333, 0.0, 100.0)
gen.add("prior_weight", double_t, 0,
        "Prior weight used to compute stixels.",
        1e4, 0.0, 10000.0)
gen.add("eps", double_t, 0,
        "DBSCAN: Neighborhood size.",
        23.89408062110343, 0.0, 100.0)
gen.add("min_pts", int_t, 0,
        "DBSCAN: number of neighbors for core points.",
        4, 0, 100)
gen.add("size_filter", int_t, 0,
        "Custom DBSCAN parameter for minimum height of core point stixel.",
        42, 1, 784)

gen.add("road_vdisparity_threshold", double_t, 0,
        "Threshold on vdisparity when binarizing for hough transform.",
        0.2, 0.0, 1.0)

# Disparity Parameters
gen.add("invalid_disparity", bool_t, 0,
        "Disparity = 0 represents an invalid disparity measurement.",
        False)
gen.add("sigma_disparity_object", double_t, 0,
        "Estimated error for OBJECT disparity model.",
        1.0, 0.0, 100.0)
gen.add("sigma_disparity_ground", double_t, 0,
        "Estimated error for GROUND disparity model.",
        2.0, 0.0, 100.0)
gen.add("sigma_sky", double_t, 0,
        "Estimated error for SKY disparity model.",
        0.1, 0.0, 100.0) # Should be small compared to sigma_dis

# Probabilities */
# Similar to values in Pfeiffer 14 dissertation, page 49.
gen.add("pout", double_t, 0,
        "Probability for outlier disparity?",
        0.15, 0.0, 1.0)
gen.add("pout_sky", double_t, 0,
        "Stixel prior parameter.",
        0.4, 0.0, 1.0)
gen.add("pord", double_t, 0,
        "Stixel prior parameter.",
        0.2, 0.0, 1.0)
gen.add("pgrav", double_t, 0,
        "Stixel prior parameter.",
        0.1, 0.0, 1.0)
gen.add("pblg", double_t, 0,
        "Stixel prior parameter.",
        0.04, 0.0, 1.0)

# 0.36, 0.3, 0.34 are similar to values in Pfeiffer 14 dissertation,
# page 49.
# However, unequal weighting did lead to invalid regions being classified as
# ground or sky and instead of continuing an object.
# Must add to 1.
gen.add("pground_given_nexist", double_t, 0,
        "Prior probability for GROUND in the case of outlier (or invalid?) disparity.",
        0.28, 0.0, 1.0)
gen.add("pobject_given_nexist", double_t, 0,
        "Prior probability for OBJECT in the case of outlier (or invalid?) disparity.",
        0.44, 0.0, 1.0)
gen.add("psky_given_nexist", double_t, 0,
        "Prior probability for SKY in the case of outlier (or invalid?) disparity.",
        0.28, 0.0, 1.0)

# Used this value from Pfeiffer 14 dissertation, page 49.
gen.add("pnexist_dis", double_t, 0,
        "Probability for outlier disparity?",
        0.25, 0.0, 1.0)
gen.add("pground", double_t, 0,
        "Prior probability for GROUND class.",
        0.33, 0.0, 1.0)
gen.add("pobject", double_t, 0,
        "Prior probability for OBJECT class.",
        0.33, 0.0, 1.0)
gen.add("psky", double_t, 0,
        "Prior probability for SKY class.",
        0.33, 0.0, 1.0)

gen.add("sigma_camera_tilt", double_t, 0,
        "Estimated error for camera angle.",
        0.05, 0.0, 10.0)
gen.add("sigma_camera_height", double_t, 0,
        "Estimated error for camera height.",
        0.05, 0.0, 10.0)

# Model Parameters */
gen.add("median_join", bool_t, 0,
        "Compute median disparity instead of mean per stixel.",
        False)
gen.add("epsilon", double_t, 0,
        "Disparity related stixel model parameter.",
        3.0, 0.0, 10.0)
gen.add("range_objects_z", double_t, 0,
        "Disparity related stixel model parameter.",
        10.20, 0.0, 100.0)

exit(gen.generate(PACKAGE, "instance_stixels", "InstanceStixels"))

