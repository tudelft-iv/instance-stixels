#!/usr/bin/env python
# This file is part of Instance Stixels:
# https://github.com/tudelft-iv/instance-stixels
#
# Copyright (c) 2019 Thomas Hehn.
#
# Instance Stixels is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Instance Stixels is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Instance Stixels. If not, see <http://www.gnu.org/licenses/>.

PACKAGE = "instance_stixels"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Image color scheme
image_color_scheme = gen.enum(
        [ gen.const("DISPARITY", int_t, 0, "Color image by disparity"),
          gen.const("SEMANTIC",  int_t, 1, "Color image by semantic class"),
          gen.const("INSTANCE",  int_t, 2, "Color image by instance id"), ],
        "Choose image color scheme.")
gen.add("image_color_scheme", int_t, 0,
        "Choose image color scheme", 1, 0, 2,
        edit_method=image_color_scheme)
gen.add("image_overlay_alpha", double_t, 0,
        "Alpha to overlay input image with output image",
        0.7, 0.0, 1.0)

# Classes in pointcloud
class_names = [
        "road", "sidewalk", "building",
        "wall", "fence", "pole",
        "traffic light", "traffic sign", "vegetation",
        "terrain", "sky", "person",
        "rider", "car", "truck",
        "bus", "train", "motocycle",
        "bicycle" ]
object_classes = [class_names[i] for i in [2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,18]]
gen.add(
    "classes_in_pointcloud",
    str_t, 0,
    "Show the following classes in pointcloud (options: {})".
    format(", ".join(class_names)),
    "car" )
    #", ".join(object_classes)) # I'd prefer this one as default.
#gen.add("beam_freq_max", double_t, 0, "Max bandpass frequency", 2000.0, 0.0, 5000.0)
#gen.add("image_overlay", bool_t, 0,
#        "Overlay output image with input image", True)

exit(gen.generate(PACKAGE, "instance_stixels", "InstanceStixelsVisualization"))

